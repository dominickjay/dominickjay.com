<div
  class="hero relative md:py-[230px] cursor-pointer h-[calc(100vh-345px)]"
  x-data="{
    height: $el.offsetHeight,
    width: $el.offsetWidth,
    createElement(event) {
      if (document.getElementsByClassName('circle').length < 14) {
        var circle = document.getElementsByClassName('default-circle')[0];
        var hero = document.querySelector('.hero');

        const newCircle = circle.cloneNode(true);
        hero.appendChild(newCircle);
        newCircle.style.top = event.clientY - 10 + 'px';
        newCircle.style.left = event.clientX - 15 + 'px';
      }
    }
  }"
  x-on:resize.window="{
    height: $el.offsetHeight,
    width: $el.offsetWidth
  }"
  @click.prevent="createElement(event)"
>
    {% set classes = "absolute rounded-full opacity-40 transition-[top,left] ease-in-out" %}

      <svg
        x-data="{
          y: null,
          x: null,
          size: 25,
          bgColor: '#ffffff',
          init() {
            this.getPos();
            this.size = this.randomSize();
            this.bgColor = this.randomBgColor();

            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
            if (prefersReducedMotion.matches) return

            setInterval(() => {
              this.y = Math.floor(Math.random() * (this.height - 0) + 0);
              this.x = Math.floor(Math.random() * (this.width - 0) + 0);
            }, 10000);
          },
          randomY(){
            var max = Math.floor(this.height);
            return Math.floor(Math.random() * (max - 0) + 0);
          },
          randomX(){
            var max = Math.floor(this.width);
            return Math.floor(Math.random() * (max - 0) + 0);
          },
          randomSize() {
            return Math.random() * (70 - 10) + 10;
          },
          randomBgColor() {
            const bgColor = ['#ffffff', '#e63946'];
            return bgColor[Math.floor(Math.random() * bgColor.length)]
          }
        }"
        :style="{
          top: y + 'px',
          left: x + 'px',
          height: size + 'px',
          width: size + 'px',
          color: bgColor
        }"
        class="{{ classes }} default-circle circle"
        style="--delay: 0.4s; transition-duration: 3s"
        width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg"
      >
        <circle cx="4.5" cy="4.5" r="4.5" fill="currentColor"/>
      </svg>
    {% for i in range(0, 6) %}
      <svg
        x-data="{
        y: undefined,
        x: undefined,
          size: 25,
          bgColor: '#ffffff',
          init() {
            this.y = this.randomY();
            this.x = this.randomX();
            this.size = this.randomSize();
            this.bgColor = this.randomBgColor();
            var rand = Math.round(Math.random() * (50000 - {{ i }})) + {{ i }};

            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
            if (prefersReducedMotion.matches) return

            setInterval(() => {
              this.y = Math.floor(Math.random() * (this.height - 0) + 0);
              this.x = Math.floor(Math.random() * (this.width - 0) + 0);
            }, rand);
          },
          randomY(){
            var max = Math.floor(this.height);
            return Math.floor(Math.random() * (max - 0) + 0);
          },
          randomX(){
            var max = Math.floor(this.width);
            return Math.floor(Math.random() * (max - 0) + 0);
          },
          randomSize() {
            return Math.random() * (70 - 10) + 10;
          },
          randomBgColor() {
            const bgColor = ['#ffffff', '#e63946'];
            return bgColor[Math.floor(Math.random() * bgColor.length)]
          }
        }"
        :style="{
          top: y + 'px',
          left: x + 'px',
          height: size + 'px',
          width: size + 'px',
          color: bgColor
        }"
        class="{{ classes }} circle"
        style="--delay: 0.4s; transition-duration: 3s"
        width="9" height="9" viewBox="0 0 9 9" fill="none" xmlns="http://www.w3.org/2000/svg"
      >
        <circle cx="4.5" cy="4.5" r="4.5" fill="currentColor"/>
      </svg>
    {% endfor %}
	<div class="container flex flex-col mdw:site-grid h-full z-10 relative cursor-default pointer-events-none">
		<div class="col-start-1 col-span-8 pointer-events-none">
			<span class="font-main fl-mb-s block kicker">{{ site.name }}</span>
			<h1
        class="h1 heading h1--alt max-w-[500px] mdw:max-w-[750px] glitch-text"
        x-data="{
          init() {
            let element = document.getElementsByClassName('glitch-text__text')[0];
            let beforeArray = new Array(3).fill(null).map(()=> ({'before': this.getRandomArbitrary(10, 50)}))
            console.log(beforeArray)

            element.style.setProperty(
              '--clip-path-before',
              'polygon(0 0, 100% 0, 100% ' + beforeArray[1].before + '%, 0 ' + beforeArray[2].before + '%)');
            element.style.setProperty(
              '--clip-path-after',
              'polygon(0 ' + beforeArray[1].before + 20 + '%, 100% 42%, 100% 100%, 0 100%)');
          },
          getRandomArbitrary(min, max) {
            return Math.random() * (max - min) + min;
          },
          getRandomInt(min, max) {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min) + min);
          }
        }"
      >
					leave it <span class="glitch-text__text" data-text="better">better</span> than you found it
			</h1>
		</div>
	</div>
</div>
