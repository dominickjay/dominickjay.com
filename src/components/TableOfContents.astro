---
import type { MarkdownHeading } from 'astro';

type Props = {
  headings: MarkdownHeading[];
};

type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[];
};

const { headings } = Astro.props;

const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }

  return array;
}, [] as HeadingWithSubheadings[]);
---

<nav class="toc" id="table-of-contents" aria-label="Table Of Contents">
    <span>Contents: </span>
    <ol>
        {
        grouppedHeadings.map((h) => (
            <li>
                <a class="group relative flex items-start gap-2 w-fit overflow-hidden" href={`#${h.slug}`}>
                    <svg class="shrink-0 opacity-[0.45] group-hover:opacity-100 transition-opacity duration-300 ease-in-out" width="20" height="18" viewBox="0 0 20 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <mask id="mask0_1844_1757" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="0" y="0" width="20" height="18">
                        <path d="M20 17.9126L0 17.9126L-1.72333e-06 0.935303L20 0.935301L20 17.9126Z" fill="white"/>
                        </mask>
                        <g mask="url(#mask0_1844_1757)">
                        <path d="M19.8958 14.6453C20.0597 14.9167 20.0321 15.2243 19.8885 15.4796C19.929 15.7702 19.8394 16.0652 19.5154 16.2915C19.2138 16.5022 18.9122 16.7129 18.6107 16.9236C18.0806 17.2938 17.2505 17.4107 16.7349 16.9236C14.3929 14.7113 11.9437 12.595 9.40481 10.5559C7.51726 12.0527 5.60676 13.5292 3.70992 15.0076C3.0442 15.5266 2.08059 15.3637 1.66174 14.7454C1.05166 14.4884 0.557132 14.1533 0.14821 13.5813C-0.0464972 13.3089 -0.0313232 12.9649 0.14821 12.6914C1.37276 10.8277 3.73969 9.18906 5.68581 7.6811C5.42536 7.48323 5.16691 7.28349 4.90124 7.08978C2.27929 5.17847 0.510741 3.96578 3.79191 2.00605C3.83618 1.97961 3.88131 1.98547 3.92626 1.97002C3.98912 1.9454 4.04943 1.92804 4.11913 1.91832C4.14081 1.9176 4.16104 1.9145 4.18238 1.91594C4.24992 1.91128 4.31601 1.89667 4.38446 1.90809C6.14851 2.20167 7.78906 3.37514 9.27746 4.66737C10.7274 3.45421 12.2714 2.29522 13.9691 1.60751C14.3733 1.44372 14.8552 1.53918 15.1664 1.76824C15.6882 1.7348 16.1639 2.01004 16.4027 2.40557C16.438 2.42412 16.4608 2.43473 16.4991 2.45506C17.2577 2.85733 17.327 3.65849 16.7657 4.21072C15.4982 5.45758 14.1508 6.64281 12.7772 7.80707C15.2504 9.85839 18.3385 12.0707 19.8958 14.6453Z" fill="black"/>
                        </g>
                    </svg>
                    <span class="">
                {h.text}</span></a>
            </li>
        ))
        }
    </ol>
</nav>

<!-- <script is:inline>
  // This script tag is useful only if you want to display the TOC alongside the blog post...
  // ... and highlight the section that the user is currently reading through.
  // Feel free to remove this tag if you don't need this type of functionality.

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        console.log(headingFragment);
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector('.active-toc-item');

          previouslyActivatedItem?.classList.remove('active-toc-item');
          tocItem.classList.add('active-toc-item');
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.classList.remove('active-toc-item');
          }
        }
      }
    },
    { root: null, rootMargin: '0px', threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll(
    'h2'
  );

  for (const heading of sectionHeadings) {
    console.log(heading);
    observer.observe(heading);
  }
</script> -->

<script is:inline>
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const headingFragment = `#${entry.target.id}`;
          const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

          if (!tocItem) return;

          if (entry.isIntersecting) {
            // Remove active class from any previously active items
            document.querySelectorAll('.active-toc-item')
              .forEach(item => item.classList.remove('active-toc-item'));

            // Add active class to current item
            tocItem.classList.add('active-toc-item');
          }
        });
      },
      {
        root: null,
        rootMargin: '-20% 0px -20% 0px', // Adds some margin to when the heading is considered "visible"
        threshold: 0.5 // Trigger when heading is 50% visible
      }
    );

    // Wait for DOM to be ready
    document.addEventListener('DOMContentLoaded', () => {
      // Get all h2 headings
      const headings = document.querySelectorAll('h2');

      // Observe each heading
      headings.forEach(heading => {
        if (heading.id) {  // Only observe headings with IDs
          observer.observe(heading);
        }
      });
    });
  </script>

<style>
    .active-toc-item svg {
        opacity: 1;
    }
</style>
