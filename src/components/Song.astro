---
import { Image } from 'astro:assets';
import type { LastFmResponse, LastFmTrack, LastFmAlbum } from '../lib/lastfm';
import { getWeeklyAlbumChart, enrichAlbumsWithImages, getRecentTracks } from '../lib/lastfm';
import moment from 'moment';

interface Props {
  musicData?: LastFmResponse | null;
}

let musicData = Astro.props.musicData;
if (!musicData) {
  try {
    const lastFmApiKey = import.meta.env.LAST_FM_API_KEY;
    if (lastFmApiKey) {
      const weekAgo = moment().subtract(4, 'week').unix();
      const now = moment().unix();
      musicData = await getWeeklyAlbumChart(weekAgo.toString(), now.toString(), lastFmApiKey, 60);
      if (musicData.error) {
        console.error('Last.fm API error:', musicData.message);
        musicData = null;
      } else if (musicData.weeklyalbumchart?.album) {
        // Enrich albums with images
        musicData.weeklyalbumchart.album = await enrichAlbumsWithImages(musicData.weeklyalbumchart.album, lastFmApiKey);
      }
    } else {
      console.warn('Missing Last.fm API key');
    }
  } catch (error) {
    console.error('Error fetching music data:', error);
    musicData = null;
  }
}

const recentTracks = musicData?.weeklyalbumchart?.album || [];
// console.log(recentTracks[0]);
---

<section class="song relative">
    <div class="grid !grid-cols-3 md:!grid-cols-12 gap-0" style="--gutter: 8px">
        {recentTracks.map(async (track: LastFmAlbum) => {
            const hasValidImage = track.image?.length > 0 && track.image[0]['#text'] && track.image[0]['#text'].length > 0;
            if (!hasValidImage) {
                return null;
            }

            return (
                <div class="col-span-1 opacity-[0.7] bg-album-cover">
                    <img
                        src={track.image[2]['#text']}
                        alt={`Cover for ${track.name}`}
                        class=""
                        onerror="this.onerror=null; this.src='/images/album-placeholder.png';"
                        width="200"
                        height="200"
                    />
                </div>
            );
        })}
    </div>
    <div class="song absolute right-[16px] top-1/2 -translate-y-1/2 bg-white w-fit" x-data="{
        items: [],
        async fetchSong() {
            const response = await fetch('/api/recent-tracks');
            const data = await response.json();
            this.items = data.recenttracks.track;
            $el.querySelector('.song__title').innerText = this.items[0].name;
            $el.querySelector('.song__artist').innerText = this.items[0].artist['#text'];
        }
    }" x-init="fetchSong()" x-cloak>
        <div class="song__card">
            <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M1 11.1663V13.833M5 7.16634V17.833M9 9.83301V15.1663M13 5.83301V19.1663M17 1.83301V23.1663M21 8.49967V16.4997M25 11.1663V13.833" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <img :src="items[0].image[2]['#text']" alt="Song cover" class="song__cover" width="250" height="250">
            <span class="song__info">
                <span x-cloak class="song__title"></span> by <span x-cloak class="song__artist"></span>
            </span>
        </div>
    </div>
</section>

<style>
    .song__card {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: var(--surface-2);
        width: fit-content;
    }

    .song__cover {
        object-fit: cover;
    }

    .bg-album-cover:hover {
        opacity: 1;
        transition: opacity 0.3s ease-in-out;
    }
</style>
