---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Pattern from '../components/Pattern.astro';
import FormattedDate from '../components/FormattedDate.astro';
import { getReadingTime } from '../utils/utils.mjs';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import profileImage1 from '../../public/images/profile-image.png';
import profileImage2 from '../../public/images/kid-image.png';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_TAGLINE, CURRENT_COMPANY, CURRENT_POSITION } from '../consts';

let books = [];

// const posts = (await getCollection('writing')).sort(
// 	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
// );

let posts = [];

if (import.meta.env.DEV && import.meta.env.DEV === true) {
    posts = await getCollection("writing",
        ({ data }) => !data?.draft
    );
} else {
    posts = await getCollection("writing");
}

posts.sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// posts = (await getCollection('writing')).sort(
// 	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
// );

const random = Math.floor(Math.random() * posts.length);
const randomPost = posts[random];

const response = await fetch("https://literal.club/graphql/",
  {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
        query: `query booksByReadingStateAndProfile(
        $limit: Int!
        $offset: Int!
        $readingStatus: ReadingStatus!
        $profileId: String!
      ) {
        booksByReadingStateAndProfile(
            limit: $limit
            offset: $offset
            readingStatus: $readingStatus
            profileId: $profileId
        )
        { id title authors {
            name
        } } }`,
        variables: {
            "limit": 100,
            "offset": 0,
            "readingStatus": "IS_READING",
            "profileId": import.meta.env.profileId
        },
    }),
}).then((response) =>
  response.json()
).then((data) => {
    books = data.data.booksByReadingStateAndProfile;
});

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main class="relative overflow-clip">
            <div class="absolute left-[-612px] mx-auto top-[92px] opacity-[0.2] pointer-events-none">
                <Pattern></Pattern>
            </div>
            <div class="container grid grid-rows-[repeat(3, minmax(0, auto))] pt-[137px] pb-0 md:pb-[62px] [--gutter:20px] md:[--gutter:43px]" style="--grid-placement: 12;">
                <h1
                    class="heading-tagline col-span-full md:col-start-1 md:col-span-7 md:row-start-1 md:row-span-3"
                    style="--max-width: 1260px"
                >
                    { SITE_TAGLINE }
                </h1>

                <div class="profile grid col-span-full md:col-start-8 md:col-span-5 relative md:row-start-1 md:row-span-3" style="--grid-placement: 12">
                    <div
                        class="profile__image-container col-span-full"
                        x-data="{
                            active: Math.floor(Math.random() * 2),
                            images: $el.querySelectorAll('img'),
                        }"
                    >
                        <Image x-data="{ id: 0 }" x-show="id == active" class="profile__image" src={profileImage2} alt="A bird sitting on a nest of eggs." />
                        <Image x-data="{ id: 1 }" x-show="id == active" class="profile__image" src={profileImage1} alt="A bird sitting on a nest of eggs." />
                    </div>
                </div>
                <div class="navigation col-span-full md:col-start-9 md:col-span-4 md:row-start-3 md:row-span-1">
                    <svg class="centered" width="51" height="23" viewBox="0 0 51 23" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M1.56148 18.3687C1.58191 18.0201 1.71797 17.4579 1.94928 16.7747C2.18059 16.0892 2.50487 15.2751 2.89267 14.3878C3.66713 12.612 4.69444 10.5408 5.73991 8.57256C6.78538 6.60428 7.85015 4.73665 8.69604 3.37429C9.11787 2.69351 9.48747 2.13749 9.76075 1.7733C9.89454 1.5924 10.0091 1.4567 10.0681 1.39976C10.0942 1.37248 10.1111 1.36389 10.0669 1.3982C10.042 1.41537 10.0023 1.44501 9.90477 1.48868C9.85487 1.50974 9.79027 1.5347 9.69731 1.5581C9.60545 1.58071 9.483 1.60175 9.33331 1.60253C9.20632 1.60331 9.08837 1.58616 9.00105 1.56354C8.91262 1.54092 8.85252 1.51518 8.8117 1.49569C8.77203 1.47619 8.75047 1.46216 8.7414 1.45514C8.73117 1.44889 8.73234 1.44969 8.738 1.45594C8.76863 1.48478 8.87063 1.60957 8.97835 1.79049C9.19947 2.15543 9.4671 2.74421 9.74491 3.45853C10.3028 4.89183 10.914 6.84214 11.524 8.80418C12.1352 10.7685 12.7441 12.7445 13.3167 14.2714C13.6047 15.0372 13.8791 15.6869 14.1637 16.1999C14.31 16.4581 14.4518 16.6812 14.6479 16.8987C14.7488 17.0086 14.8622 17.1187 15.0425 17.2379C15.1332 17.2971 15.2432 17.3595 15.3861 17.4181C15.529 17.4758 15.7104 17.5304 15.9281 17.5592C16.1719 17.5927 16.4248 17.5896 16.6459 17.56C16.8693 17.5312 17.0598 17.4789 17.2151 17.4218C17.5269 17.3057 17.7129 17.1794 17.8478 17.0844C19.1632 16.1415 20.093 15.0247 20.8289 13.8558C21.5636 12.6853 22.1091 11.4563 22.6341 10.2523C23.1579 9.04902 23.6603 7.86995 24.2703 6.80783C24.8803 5.74493 25.5969 4.80448 26.5098 4.05041C25.5606 3.89364 24.6105 3.7369 23.6614 3.58094C23.6818 3.64801 23.7147 3.77901 23.7476 3.94668C23.7816 4.11434 23.8179 4.32176 23.8576 4.55804C23.9347 5.03061 24.0208 5.62096 24.1183 6.28224C24.3134 7.60483 24.5549 9.20968 24.8792 10.7701C25.0413 11.5507 25.2251 12.3211 25.4349 13.0448C25.6456 13.7685 25.8828 14.4439 26.1638 15.0473C26.4497 15.6518 26.7614 16.1796 27.2297 16.65C27.468 16.8831 27.7536 17.1093 28.1608 17.3003C28.3636 17.3948 28.5997 17.4782 28.8649 17.5351C29.1281 17.592 29.4193 17.62 29.7075 17.6122C29.72 17.6122 29.7313 17.6114 29.7438 17.6114C30.0407 17.6005 30.322 17.5545 30.5725 17.4899C30.8244 17.4236 31.0454 17.3392 31.2437 17.2465C31.6418 17.0602 31.9549 16.8418 32.2428 16.6046C32.8131 16.1305 33.2928 15.5668 33.7747 14.9257C34.7284 13.6492 35.6569 12.0614 36.6072 10.5416C37.0812 9.78283 37.5575 9.04358 38.0338 8.37996C38.5075 7.7171 38.9827 7.1299 39.4306 6.68542C39.6539 6.46395 39.8684 6.27833 40.0622 6.13717C40.2551 5.99524 40.4251 5.90011 40.5464 5.84787C40.6688 5.79405 40.7311 5.78394 40.753 5.77848C40.7768 5.77614 40.7731 5.76833 40.8436 5.78238C40.7391 5.75118 40.7005 5.72544 40.696 5.72232C40.696 5.72155 40.696 5.72153 40.6971 5.72153C40.6971 5.72153 40.6983 5.72231 40.6994 5.72309C40.7028 5.72464 40.7088 5.727 40.7144 5.7309C40.728 5.73947 40.7459 5.75196 40.77 5.76913C40.864 5.8393 41.0159 5.98201 41.1859 6.1754C41.5296 6.56375 41.9481 7.15329 42.3912 7.86215C43.0672 8.9422 43.8087 10.3046 44.5785 11.759C45.3486 13.2149 46.1422 14.766 46.8953 16.243C47.6493 17.7198 48.3602 19.122 48.9611 20.2839C49.5632 21.4458 50.052 22.3651 50.373 22.8839C50.5146 23.1122 51.0873 22.9727 50.9887 22.734C50.7745 22.2155 50.4591 21.2642 50.0724 20.0641C49.6859 18.863 49.2266 17.4109 48.7095 15.8802C48.1947 14.3501 47.621 12.7414 47.0109 11.2255C46.4021 9.70876 45.751 8.28715 45.1092 7.1112C44.6842 6.33526 44.268 5.66851 43.8314 5.12653C43.6115 4.85516 43.3891 4.61342 43.125 4.39351C42.9913 4.28355 42.8471 4.17829 42.6725 4.0777C42.4991 3.9771 42.2949 3.87961 42.0297 3.80319C41.5194 3.65269 40.9434 3.59187 40.4013 3.63242C39.8559 3.67141 39.3592 3.80239 38.9283 3.97474C38.4965 4.14863 38.1211 4.36387 37.7729 4.60327C37.4258 4.84425 37.1073 5.11097 36.801 5.40027C36.1921 5.97811 35.6354 6.64563 35.0979 7.36463C34.5627 8.08363 34.0501 8.85328 33.5535 9.62686C32.5626 11.1709 31.6293 12.7367 30.7802 13.8636C30.3606 14.4244 29.9546 14.8735 29.6508 15.1208C29.5032 15.2439 29.3831 15.3133 29.3491 15.3273C29.3445 15.3297 29.3423 15.3305 29.3411 15.3312C29.3423 15.3305 29.3411 15.3312 29.3434 15.3305C29.3468 15.3289 29.3581 15.325 29.3774 15.3203C29.4137 15.3102 29.4828 15.2969 29.5678 15.2946C29.5712 15.2946 29.5746 15.2938 29.578 15.2938C29.6766 15.2907 29.7846 15.3016 29.8684 15.3203C29.9534 15.3383 30.0146 15.3624 30.0464 15.3772C30.0622 15.3842 30.0724 15.3897 30.0758 15.392C30.0781 15.3936 30.0781 15.3936 30.0781 15.3936C30.0781 15.3936 30.0758 15.392 30.0724 15.3905C30.0611 15.3819 30.0339 15.3601 29.9965 15.3234C29.8435 15.1793 29.5927 14.8166 29.3717 14.3371C28.9147 13.37 28.5124 11.9367 28.1902 10.4379C27.8647 8.93676 27.6097 7.36071 27.3975 6.04282C27.2909 5.38388 27.1957 4.78889 27.1073 4.2937C27.0631 4.04573 27.0201 3.8227 26.977 3.62618C26.9339 3.42811 26.892 3.25888 26.841 3.0998C26.7682 2.87677 26.6118 2.69193 26.3987 2.54688C26.1865 2.40105 25.9156 2.29735 25.6241 2.25056C25.3328 2.203 25.0221 2.21315 24.7386 2.27786C24.454 2.34259 24.1932 2.46034 23.9925 2.63036C22.786 3.65346 21.956 4.81851 21.2938 6.01632C20.6339 7.21568 20.1406 8.45558 19.6474 9.65574C19.1564 10.8551 18.6653 12.0156 18.0474 13.0487C17.4305 14.0836 16.6901 14.985 15.724 15.7048C15.7217 15.7063 15.7206 15.7079 15.7206 15.7079C15.7194 15.7087 15.7206 15.7087 15.7195 15.7087C15.7206 15.7087 15.7252 15.7063 15.7331 15.7017C15.749 15.6931 15.7807 15.6767 15.8385 15.6549C15.8964 15.6346 15.9837 15.6089 16.0982 15.5941C16.2104 15.5793 16.3499 15.5777 16.4735 15.5957C16.6402 15.6175 16.7683 15.658 16.8579 15.6946C16.9475 15.7313 17.0031 15.764 17.0382 15.7882C17.0745 15.8116 17.0904 15.8264 17.0983 15.8326C17.0995 15.8342 17.1006 15.8359 17.1017 15.8367C17.1006 15.8359 17.0972 15.8334 17.0938 15.8295C17.0564 15.7952 16.9543 15.6619 16.8432 15.4733C16.6164 15.0935 16.3363 14.4914 16.0415 13.7669C15.4473 12.3141 14.7738 10.3576 14.0946 8.40414C13.4142 6.44836 12.727 4.49411 12.0875 3.00465C11.7655 2.25758 11.4605 1.63059 11.1464 1.14478C10.9865 0.8999 10.8312 0.691697 10.6146 0.492847C10.5035 0.393821 10.3765 0.293237 10.1792 0.194971C10.0805 0.145848 9.96262 0.0982639 9.81634 0.0608321C9.67232 0.0241798 9.49886 -0.000761659 9.31515 1.77633e-05C9.153 0.00157661 9.01808 0.0241605 8.91149 0.0499009C8.8049 0.0764208 8.72437 0.106838 8.65861 0.135677C8.52936 0.192613 8.4545 0.243315 8.39214 0.287761C8.27081 0.375894 8.19936 0.44842 8.12566 0.526401C7.98278 0.680025 7.85128 0.854694 7.69933 1.07071C7.40112 1.49961 7.04166 2.08369 6.63456 2.79175C5.8227 4.20713 4.82599 6.11067 3.85195 8.11872C2.87907 10.1267 1.92999 12.2369 1.21788 14.061C0.861847 14.9725 0.564773 15.8123 0.352726 16.5368C0.140679 17.2628 0.0114229 17.8657 8.95926e-05 18.3398C-0.0135132 18.9331 1.52635 18.9606 1.56148 18.3687Z" fill="black"/>
                    </svg>
                    <nav class="external-links" aria-label="External Site Links">
                        <a class="nav-link nav-link--small" href="https://github.com/withastro/astro" target="_blank">
                            <span class="">Email</span>
                        </a>
                        <a class="nav-link nav-link--small" href="https://m.webtoo.ls/@astro" target="_blank">
                            <span class="">Mastodon</span>
                        </a>
                        <a class="nav-link nav-link--small" href="https://twitter.com/astrodotbuild" target="_blank">
                            <span class="">LinkedIn</span>
                        </a>
                        <a class="nav-link nav-link--small" href="https://github.com/withastro/astro" target="_blank">
                            <span class="">Bluesky</span>
                        </a>
                    </nav>
                </div>
                <div class="col-span-full md:col-start-4 md:col-span-5 relative md:row-start-3 md:row-span-1">
                    <div class="profile__description md:absolute md:bottom-0 md:left-0">
                        {SITE_DESCRIPTION}
                    </div>
                </div>
            </div>
            <div class="container grid py-[30px] md:py-[62px] [--gutter:20px] md:[--gutter:43px]" style="--grid-placement: 12">
                <div class="col-span-full md:col-span-5 row-start-2 body-text body-text--large">
                    <p>Working in design agencies and the private sector has given me a pretty good handle on user experience, and I've really learned to bake creativity into everything I do, it's just how I work. </p>
                    <p>You can check out my resume for the full story on my experience. Day-to-day, I'm a <span class="bg-black py-[0] leading-[1.75] inline-block text-white px-[8px]">{CURRENT_POSITION}</span> at <span class="bg-black py-[0] leading-[1.75] inline-block text-white px-[8px]">{CURRENT_COMPANY}</span>, and that means I get to dive into a whole range of different technologies and processes, which keeps things really interesting.</p>
                </div>
                <div
                    class="info-panel"
                    x-data="{
                        time: '',
                        items: [],
                        artist: '',
                    }"
                    x-init="
                        const music = await fetch(
							 'http://ws.audioscrobbler.com/2.0/?method=user.getrecenttracks&user=zerosandones217&limit=10&api_key=86a5b41a85035739e32c576f027c4765&format=json',
							  {
								  method: 'GET',
							  },
						  )
                          .then((response) => response.json())
                          .then((responseJSON) => {
                            this.items = responseJSON.recenttracks.track;
                        });

                        $el.querySelector('.music__artist').innerText = this.items[0].artist['#text'];
                        $el.querySelector('.music__song').innerText = this.items[0].name;

                        const weather = await fetch(
							 'http://api.weatherapi.com/v1/current.json?q=Plymouth', {
                                method: 'GET',
                                headers: new Headers({
                                    'Content-Type': 'application/json',
                                    key: 'b0bf9aab45af4844b6e151838252301',
                                }),
                            })
                          .then((response) => response.json())
                          .then((responseJSON) => {
                            $el.querySelector('.temp').innerText = responseJSON.current.temp_c + '°C';
                        });

                        setInterval(function () {
                            const time = new Date().toLocaleTimeString();
                            $el.querySelector('.time').innerText = time;
                        }, 1000);

                    "
                    x-cloak
                >
                    <div class="info-panel__details">
                        <!-- Song -->
                        <div class="info-panel__detail music">
                            <svg width="26" height="25" viewBox="0 0 26 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M1 11.1663V13.833M5 7.16634V17.833M9 9.83301V15.1663M13 5.83301V19.1663M17 1.83301V23.1663M21 8.49967V16.4997M25 11.1663V13.833" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                            <span><span x-cloak class="music__song"></span> by <span x-cloak class="music__artist"></span></span>
                        </div>
                        <!-- Book -->
                        <div class="info-panel__detail book">
                            <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clip-path="url(#clip0_1344_51453)">
                                <path d="M22.6562 0H5.46875C4.43275 0 3.43918 0.41155 2.70661 1.14411C1.97405 1.87668 1.5625 2.87025 1.5625 3.90625V21.0938C1.5625 22.1298 1.97405 23.1233 2.70661 23.8559C3.43918 24.5884 4.43275 25 5.46875 25H22.6562C22.8635 25 23.0622 24.9177 23.2087 24.7712C23.3552 24.6247 23.4375 24.426 23.4375 24.2188V0.78125C23.4375 0.57405 23.3552 0.375336 23.2087 0.228823C23.0622 0.08231 22.8635 0 22.6562 0ZM21.875 23.4375H5.46875C4.84715 23.4375 4.25101 23.1906 3.81147 22.751C3.37193 22.3115 3.125 21.7154 3.125 21.0938C3.125 20.4721 3.37193 19.876 3.81147 19.4365C4.25101 18.9969 4.84715 18.75 5.46875 18.75H19.5312C20.0148 18.7514 20.4861 18.9022 20.8805 19.182C21.2749 19.4617 21.5732 19.8566 21.7344 20.3125H8.59375V21.875H21.875V23.4375ZM21.875 17.9688C21.1988 17.4616 20.3764 17.1875 19.5312 17.1875H5.46875C4.62355 17.1875 3.80116 17.4616 3.125 17.9688V3.90625C3.125 3.28465 3.37193 2.68851 3.81147 2.24897C4.25101 1.80943 4.84715 1.5625 5.46875 1.5625H21.875V17.9688Z" fill="black"/>
                                <path d="M7.03125 20.3125H5.46875V21.875H7.03125V20.3125Z" fill="black"/>
                                <path d="M5.46875 14.0625C5.46875 14.2697 5.55106 14.4684 5.69757 14.6149C5.84409 14.7614 6.0428 14.8438 6.25 14.8438H18.75C18.9572 14.8438 19.1559 14.7614 19.3024 14.6149C19.4489 14.4684 19.5312 14.2697 19.5312 14.0625V4.6875C19.5312 4.4803 19.4489 4.28159 19.3024 4.13507C19.1559 3.98856 18.9572 3.90625 18.75 3.90625H6.25C6.0428 3.90625 5.84409 3.98856 5.69757 4.13507C5.55106 4.28159 5.46875 4.4803 5.46875 4.6875V14.0625ZM7.03125 5.46875H17.9688V10.6172L16.1797 8.82812C16.0333 8.68262 15.8353 8.60094 15.6289 8.60094C15.4225 8.60094 15.2245 8.68262 15.0781 8.82812L13.2812 10.6172L11.4922 8.82812C11.3458 8.68262 11.1478 8.60094 10.9414 8.60094C10.735 8.60094 10.537 8.68262 10.3906 8.82812L7.03125 12.1797V5.46875Z" fill="black"/>
                                </g>
                                <defs>
                                <clipPath id="clip0_1344_51453">
                                <rect width="25" height="25" fill="white"/>
                                </clipPath>
                                </defs>
                            </svg>
                            <span><span class="music__song">{books[0].title}</span> by <span class="music__artist">{books[0].authors[0].name}</span></span>
                        </div>
                        <!-- Weather -->
                        <div class="info-panel__detail weather">
                            <svg width="25" height="25" viewBox="0 0 25 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clip-path="url(#clip0_1344_51490)">
                                <path d="M22.9193 16.6667C22.9193 16.9429 22.8095 17.2079 22.6142 17.4032C22.4188 17.5986 22.1539 17.7083 21.8776 17.7083H3.1276C2.85134 17.7083 2.58638 17.5986 2.39103 17.4032C2.19568 17.2079 2.08594 16.9429 2.08594 16.6667C2.08594 16.3904 2.19568 16.1254 2.39103 15.9301C2.58638 15.7347 2.85134 15.625 3.1276 15.625H21.8776C22.1539 15.625 22.4188 15.7347 22.6142 15.9301C22.8095 16.1254 22.9193 16.3904 22.9193 16.6667ZM17.7109 21.875C17.9872 21.875 18.2522 21.7653 18.4475 21.5699C18.6429 21.3746 18.7526 21.1096 18.7526 20.8333C18.7526 20.5571 18.6429 20.2921 18.4475 20.0968C18.2522 19.9014 17.9872 19.7917 17.7109 19.7917H7.29427C7.018 19.7917 6.75305 19.9014 6.5577 20.0968C6.36235 20.2921 6.2526 20.5571 6.2526 20.8333C6.2526 21.1096 6.36235 21.3746 6.5577 21.5699C6.75305 21.7653 7.018 21.875 7.29427 21.875H17.7109ZM16.6693 13.5417C16.6693 12.4366 16.2303 11.3768 15.4489 10.5954C14.6675 9.81399 13.6077 9.375 12.5026 9.375C11.3975 9.375 10.3377 9.81399 9.55633 10.5954C8.77492 11.3768 8.33594 12.4366 8.33594 13.5417H16.6693ZM18.7526 12.5C18.7526 12.7763 18.8624 13.0412 19.0577 13.2366C19.2531 13.4319 19.518 13.5417 19.7943 13.5417H20.8359C21.1122 13.5417 21.3772 13.4319 21.5725 13.2366C21.7679 13.0412 21.8776 12.7763 21.8776 12.5C21.8776 12.2237 21.7679 11.9588 21.5725 11.7634C21.3772 11.5681 21.1122 11.4583 20.8359 11.4583H19.7943C19.518 11.4583 19.2531 11.5681 19.0577 11.7634C18.8624 11.9588 18.7526 12.2237 18.7526 12.5ZM4.16927 11.4583C3.893 11.4583 3.62805 11.5681 3.4327 11.7634C3.23735 11.9588 3.1276 12.2237 3.1276 12.5C3.1276 12.7763 3.23735 13.0412 3.4327 13.2366C3.62805 13.4319 3.893 13.5417 4.16927 13.5417H5.21094C5.48721 13.5417 5.75216 13.4319 5.94751 13.2366C6.14286 13.0412 6.2526 12.7763 6.2526 12.5C6.2526 12.2237 6.14286 11.9588 5.94751 11.7634C5.75216 11.5681 5.48721 11.4583 5.21094 11.4583H4.16927ZM11.4609 4.16667V5.20833C11.4609 5.4846 11.5707 5.74955 11.766 5.9449C11.9614 6.14025 12.2263 6.25 12.5026 6.25C12.7789 6.25 13.0438 6.14025 13.2392 5.9449C13.4345 5.74955 13.5443 5.4846 13.5443 5.20833V4.16667C13.5443 3.8904 13.4345 3.62545 13.2392 3.4301C13.0438 3.23475 12.7789 3.125 12.5026 3.125C12.2263 3.125 11.9614 3.23475 11.766 3.4301C11.5707 3.62545 11.4609 3.8904 11.4609 4.16667ZM17.6589 5.87083L16.9224 6.60729C16.8229 6.70338 16.7436 6.81832 16.689 6.94541C16.6344 7.0725 16.6056 7.20919 16.6044 7.3475C16.6032 7.48581 16.6296 7.62298 16.682 7.75099C16.7343 7.87901 16.8117 7.99531 16.9095 8.09312C17.0073 8.19092 17.1236 8.26827 17.2516 8.32065C17.3796 8.37302 17.5168 8.39938 17.6551 8.39818C17.7934 8.39698 17.9301 8.36824 18.0572 8.31365C18.1843 8.25905 18.2992 8.1797 18.3953 8.08021L19.1318 7.34375C19.2313 7.24766 19.3106 7.13272 19.3652 7.00563C19.4198 6.87854 19.4485 6.74185 19.4497 6.60354C19.4509 6.46523 19.4246 6.32806 19.3722 6.20005C19.3198 6.07203 19.2425 5.95573 19.1447 5.85792C19.0469 5.76012 18.9306 5.68277 18.8026 5.63039C18.6745 5.57802 18.5374 5.55166 18.3991 5.55286C18.2607 5.55407 18.1241 5.5828 17.997 5.63739C17.8699 5.69199 17.7549 5.77134 17.6589 5.87083ZM7.34635 5.87083C7.14989 5.68109 6.88677 5.57609 6.61364 5.57846C6.34052 5.58084 6.07926 5.69039 5.88613 5.88352C5.69299 6.07666 5.58344 6.33792 5.58107 6.61104C5.5787 6.88416 5.68369 7.14729 5.87344 7.34375L6.6099 8.08021C6.80636 8.26996 7.06948 8.37495 7.34261 8.37258C7.61573 8.3702 7.87699 8.26065 8.07012 8.06752C8.26326 7.87439 8.37281 7.61312 8.37518 7.34C8.37755 7.06688 8.27256 6.80375 8.08281 6.60729L7.34635 5.87083Z" fill="black"/>
                                </g>
                                <defs>
                                <clipPath id="clip0_1344_51490">
                                <rect width="25" height="25" fill="white"/>
                                </clipPath>
                                </defs>
                            </svg>
                            <span class="temp">11 ° 7 °</span>
                        </div>
                        <!-- Time -->
                        <div class="info-panel__detail min-w-[100px]">
                            <svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clip-path="url(#clip0_1344_51507)">
                                <path d="M10 0.5C12.7616 0.5 15.2614 1.61897 17.0708 3.42919C18.8802 5.23857 20 7.7392 20 10.5C20 13.2608 18.881 15.7614 17.0708 17.5708C15.2614 19.3802 12.7608 20.5 10 20.5C7.23836 20.5 4.73857 19.381 2.92919 17.5708C1.11897 15.7614 0 13.2608 0 10.5C0 7.7392 1.11897 5.23857 2.92919 3.42919C4.73857 1.61897 7.23836 0.5 10 0.5ZM9.18245 5.56862C9.18245 5.26636 9.42747 5.02134 9.72973 5.02134C10.032 5.02134 10.277 5.26636 10.277 5.56862V10.6204L14.0776 12.8735C14.337 13.0267 14.4237 13.3618 14.2704 13.622C14.1172 13.8813 13.7821 13.968 13.5219 13.8148L9.48135 11.4194C9.3037 11.3285 9.18245 11.1441 9.18245 10.9319V5.56862ZM16.297 4.20296C14.6855 2.59144 12.4594 1.59455 10 1.59455C7.54063 1.59455 5.31447 2.59144 3.70296 4.20296C2.09144 5.81447 1.09455 8.04063 1.09455 10.5C1.09455 12.9594 2.09144 15.1855 3.70296 16.797C5.31447 18.4086 7.54063 19.4054 10 19.4054C12.4594 19.4054 14.6855 18.4086 16.297 16.797C17.9086 15.1855 18.9054 12.9594 18.9054 10.5C18.9054 8.04063 17.9086 5.81447 16.297 4.20296Z" fill="black"/>
                                </g>
                                <defs>
                                <clipPath id="clip0_1344_51507">
                                <rect width="20" height="20" fill="white" transform="translate(0 0.5)"/>
                                </clipPath>
                                </defs>
                            </svg>
                        <span class="time"></span>
                        </div>
                    </div>
                </div>
            </div>
            <section class="py-[80px]">
                <div class="container grid [--gutter:43px]" style="--grid-placement: 12">
                    <div class="col-span-full md:col-span-4 row-start-2 md:row-start-1">
                        <div class="flex flex-col gap-y-[24px] sticky top-[120px]">
                            <h3 class="h3">Can't decide?</h3>
                            <a
                                class="py-[16px] px-[24px] border w-fit hover:!no-underline hover:bg-black duration-300 ease-in-out transition-colors hover:text-white"
                                href={`/writing/${randomPost.id}/`}
                            >Click here for a Random Post</a>
                        </div>
                    </div>
                    <div class="col-span-full md:col-start-5 md:col-span-8 flex flex-col gap-y-[48px] row-start-1 md:row-start-1">
                        <div class="flex items-center justify-between">
                            <h2 class="h2 reveal reveal--fade-in">Latest Posts</h2>
                            <a class="reveal reveal--fade-in" style="--delay: 0.5s" href="/writing">View all</a>
                        </div>
                        <div>
                            <ol class="flex flex-col gap-y-[32px]">
                                {
						            posts.slice(0,5).map((post, i) => (
                                    <li
                                        class="reveal reveal--fade-in"
                                        style="`--delay: {i * 0.25}s`"
                                    >
                                            <div class="flex flex-col gap-y-[8px]">
                                                <div class="flex gap-x-[16px]">
                                                    <span>{getReadingTime(post.body)} min</span>
                                                </div>
                                                <div class="flex justify-between">

                                                    <div class="flex flex-col gap-y-[8px]">
                                                        <a class="text-[20px] tracking-[-0.02em] block mb-[4px]" href={`/writing/${post.id}/`}>
                                                            <h4>{post.data.title}</h4>
                                                        </a>
                                                        <p class="opacity-[0.64] body-text">{post.data.description}</p>
                                                    </div>
                                                    <p class="date shrink-0">
                                                        <FormattedDate date={post.data.pubDate} />
                                                    </p>
                                                </div>
                                            </div>
                                        </li>
                                    ))
                                }
                            </ol>
                        </div>
                    </div>
                </div>
            </section>
		</main>
		<Footer />
	</body>
</html>

<script>

    import Typewriter from 'typewriter-effect/dist/core';
    import { runOnce } from '@bramus/sda-utilities';
    import splt from 'spltjs';

    // Run the “fade-in” scroll-driven animation on the `#hero` element only once.
    document.querySelectorAll(".reveal--fade-in").forEach(($el) => {
        runOnce($el, "fadeIn");
    });

    console.log(splt);
    splt({});

    // var taglines = [
    //     'Leave it better than you found it',
    //     'Build better, build forward',
    //     'Elevate what you create',
    //     'Better by design',
    //     'Small steps, lasting impact',
    //     'Making good stuff gooder',
    //     'Making yesterday jealous of tomorrow'
    // ]

    // var app = document.querySelectorAll(".heading-tagline")[0];

    // var typewriter = new Typewriter(app, {
    //     loop: true,
    //     delay: 'natural',
    //     devMode: true
    // })

    // let index = 1;

    // startTyping(taglines[0]);

    // setInterval(() => {
    //     const randomTagline = taglines[index];
    //     startTyping(randomTagline);
    //     if (index <= taglines.length) {
    //         index = index + 1;
    //     }
    // }, 12000);

    // function startTyping(randomTagline) {
    //     typewriter
    //         .typeString(randomTagline)
    //         .pauseFor(6000)
    //         .start()
    //         .deleteAll()
    // }

</script>
