---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_TAGLINE } from '../consts';
import moment from "moment";

let currentBooks = [];
let finishedBooks = [];
let readBooks = [];

const currentlyReading = await fetch("https://literal.club/graphql/",
  {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
        query: `query booksByReadingStateAndProfile(
        $limit: Int!
        $offset: Int!
        $readingStatus: ReadingStatus!
        $profileId: String!
      ) {
        booksByReadingStateAndProfile(
            limit: $limit
            offset: $offset
            readingStatus: $readingStatus
            profileId: $profileId
        )
        { id title authors {
            name
        } } }`,
        variables: {
            "limit": 100,
            "offset": 0,
            "readingStatus": "IS_READING",
            "profileId": "cllld352811104650itu2jvq4ppp"
        },
    }),
}).then((response) =>
  response.json()
).then((data) => {
    currentBooks = data.data.booksByReadingStateAndProfile;
});

const finished = await fetch("https://literal.club/graphql/",
  {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
        query: `
        query booksByReadingStateAndProfile(
            $limit: Int!
            $offset: Int!
            $readingStatus: ReadingStatus!
            $profileId: String!
        ) {
            booksByReadingStateAndProfile(
                limit: $limit
                offset: $offset
                readingStatus: $readingStatus
                profileId: $profileId
        ) {
            id title authors {
                name
            } } }`,
        variables: {
            "limit": 100,
            "offset": 0,
            "readingStatus": "FINISHED",
            "profileId": "cllld352811104650itu2jvq4ppp"
        },
    }),
}).then((response) =>
  response.json()
).then((data) => {
    finishedBooks = data.data.booksByReadingStateAndProfile;
    // const books = new Map<number, any>();
    // for (const book of finishedBooks) {
    //     const dates = fetch("https://literal.club/graphql/", {
    //         method: "POST",
    //         body: JSON.stringify({
    //             query: `query getReadDates($bookId: String!, $profileId: String!) {
    //                 getReadDates(bookId: $bookId, profileId: $profileId) {
    //                 started
    //                 finished
    //                 }
    //             }`,
    //             variables: {
    //                 bookId: book.id,
    //                 profileId: "cllld352811104650itu2jvq4ppp",
    //             },
    //         }),
    //         headers: {
    //             "Content-Type": "application/json",
    //             authorization: process.env.LITERAL_TOKEN ?? "",
    //         },
    //     })
    //     .then((res) => res.json())
    //     .then((finishedData) => {
    //         const date = finishedData?.data.getReadDates?.pop();
    //         const b = {
    //             ...book,
    //             started: date?.started,
    //             finished: date?.finished,
    //         };
    //         if (b.finished != null) {
    //             const year = moment(b.finished).year();

    //             let read = books.get(year);
    //             if (read == null) {
    //                 read = [b];
    //                 books.set(year, read);
    //             } else {
    //                 read.push(b);
    //             }
    //         }
    //         console.log(books)
    //     });
    // }
});

await function getBooks() {
    const books = new Map<number, any>();
    for (const book of finishedBooks) {
        const dates = fetch("https://literal.club/graphql/", {
            method: "POST",
            body: JSON.stringify({
                query: `query getReadDates($bookId: String!, $profileId: String!) {
                    getReadDates(bookId: $bookId, profileId: $profileId) {
                    started
                    finished
                    }
                }`,
                variables: {
                    bookId: book.id,
                    profileId: "cllld352811104650itu2jvq4ppp",
                },
            }),
            headers: {
                "Content-Type": "application/json",
                authorization: process.env.LITERAL_TOKEN ?? "",
            },
        })
        .then((res) => res.json())
        .then((finishedData) => {
            const date = finishedData?.data.getReadDates?.pop();
            const b = {
                ...book,
                started: date?.started,
                finished: date?.finished,
            };
            if (b.finished != null) {
                const year = moment(b.finished).year();

                let read = books.get(year);
                if (read == null) {
                    read = [b];
                    books.set(year, read);
                } else {
                    read.push(b);
                }
            }
        });
    }
    // console.log(finishedBooks)
    return books;
}

getBooks();
// await console.log(getBooks())

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
            <div class="container grid grid-rows-[repeat(3, minmax(0, auto))] pt-[137px] pb-[62px]" style="--grid-placement: 12; --gutter: 43px;">
                <ul>
                    {currentBooks.map((book) => <li>{book.title}</li>)}
                </ul>
                <ul>
                    {readBooks.map((book) => <li>{book.title}</li>)}
                </ul>
            </div>
		</main>
		<Footer />
	</body>
</html>
