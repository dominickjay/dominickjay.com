---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';
import { SITE_TITLE, SITE_DESCRIPTION, SITE_TAGLINE } from '../consts';
import moment from "moment";

let currentBooks = [];
let finishedBooks = [];
let readBooks = [];

const currentlyReading = await fetch("https://literal.club/graphql/",
  {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({
        query: `query booksByReadingStateAndProfile(
        $limit: Int!
        $offset: Int!
        $readingStatus: ReadingStatus!
        $profileId: String!
      ) {
        booksByReadingStateAndProfile(
            limit: $limit
            offset: $offset
            readingStatus: $readingStatus
            profileId: $profileId
        )
        { id title cover authors {
            name
        } } }`,
        variables: {
            "limit": 100,
            "offset": 0,
            "readingStatus": "IS_READING",
            "profileId": import.meta.env.profileId
        },
    }),
}).then((response) =>
  response.json()
).then((data) => {
    currentBooks = data.data.booksByReadingStateAndProfile;
});

async function getBooks() {
  const data = (
    (await fetch("https://literal.club/graphql/", {
      method: "POST",
      body: JSON.stringify({
        query: `query booksByReadingStateAndProfile(
        $limit: Int!
        $offset: Int!
        $readingStatus: ReadingStatus!
        $profileId: String!
      ) {
        booksByReadingStateAndProfile(
            limit: $limit offset: $offset readingStatus: $readingStatus profileId: $profileId) {
            id title cover authors { name } } }`,
        variables: {
          limit: 100,
          offset: 0,
          readingStatus: "FINISHED",
          profileId: import.meta.env.profileId,
        },
      }),
      headers: {
        "Content-Type": "application/json",
        authorization: import.meta.env.literalToken ?? "",
      },
    }).then((res) => res.json())) as any
  );

  const books = new Map<number, any>();

  for (const book of data.data.booksByReadingStateAndProfile) {
    const dates = (
      (await fetch("https://literal.club/graphql/", {
        method: "POST",
        body: JSON.stringify({
          query: `query getReadDates($bookId: String!, $profileId: String!) {
            getReadDates(bookId: $bookId, profileId: $profileId) {
              started
              finished
            }
          }`,
          variables: {
            bookId: book.id,
            profileId: import.meta.env.profileId,
          },
        }),
        headers: {
          "Content-Type": "application/json",
          authorization: import.meta.env.literalToken ?? "",
        },
      }).then((res) => res.json())) as any
    ).data;

    const date = dates?.getReadDates?.pop();

    const b = {
      ...book,
      started: date?.started,
      finished: date?.finished,
    };

    if (b.finished != null) {
      const year = moment(b.finished).year();

      let read = books.get(year);
      if (read == null) {
        read = [b];
        books.set(year, read);
      } else {
        read.push(b);
      }
    }
  }

  return books;
}

const books = await getBooks();

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		<main>
            <div
                class="container grid grid-rows-[repeat(3, minmax(0, auto))] pt-[137px] pb-[62px]"
                style="--grid-placement: 12; --gutter: 43px;"
                x-data="{
                    list: true
                }"
            >
                <button class="cursor-pointer col-span-full max-w-fit py-[16px] px-[24px] border hover:!no-underline hover:bg-black duration-300 ease-in-out transition-colors hover:text-white" @click="list = ! list">
                    List me
                </button>
                <div
                    class="col-span-full grid gap-y-[24px]"
                    :class="{
                        'flex flex-col': list,
                        'grid': !list
                    }"
                >
                    <h2 class="h2 col-span-full mb-[24px]">Currently Reading</h2>
                    <ul class="col-span-full grid gap-y-[12px]"
                        :class="{
                            'flex flex-col': list,
                            'grid': !list
                        }"
                    >
                        {currentBooks.map((book, i) =>
                            <li
                                class="col-span-2 group"
                                :class="{
                                    'border-b'
                                }"
                            >
                                <div class="overflow-hidden flex flex-col gap-y-[12px] relative">
                                    <div x-show="!list" class="overflow-hidden aspect-[1/1.5]">
                                        <Image class="w-full" src={book.cover} alt={'Cover for ' + book.title} width="200" height="100" />
                                    </div>
                                    <div
                                        class="flex flex-col gap-[8px]w-full"
                                        :class="{
                                            'opacity-0  absolute bg-black inset-0 text-white py-[8px] px-[16px] group-hover:opacity-100': !list
                                        }"
                                    >
                                        <p class="text-[22px]">{book.title}</p>
                                    </div>
                                </div>
                            </li>
                        )}
                    </ul>
                </div>
                {
                    [...books].map((year, i) => (
                        <ul class="col-span-full">
                            <li>
                                <div class="flex flex-col gap-y-[24px]">
                                    <h2 class="h2">{year[0]}</h2>
                                    <ul
                                        class="col-span-full grid gap-y-[12px]"
                                        :class="{
                                            'flex flex-col': list,
                                            'grid': !list
                                        }"
                                    >
                                        {
                                            [...books][i][1].map((book, index) => (
                                            <li
                                                class="col-span-2 group"
                                                :class="{
                                                    'border-b'
                                                }"
                                            >
                                                    <div class="overflow-hidden flex flex-col gap-y-[12px] relative">
                                                        <div x-show="!list" class="overflow-hidden aspect-[1/1.5]">
                                                            <Image class="w-full" src={book.cover} alt={'Cover for ' + book.title} width="200" height="100" />
                                                        </div>
                                                        <div
                                                            class="flex flex-col gap-[8px]w-full"
                                                            :class="{
                                                                'opacity-0  absolute bg-black inset-0 text-white py-[8px] px-[16px] group-hover:opacity-100': !list
                                                            }"
                                                        >
                                                            <p class="text-[22px]">{book.title}</p>
                                                            <div
                                                                class="mt-auto pb-[8px] flex flex-col"
                                                                :class="{
                                                                    'flex-row gap-x-[20px] items-center mt-[8px]': list,
                                                                }"
                                                            >
                                                                {book.started != book.finished && (
                                                                    // <p>{new Date(book.started)}</p>
                                                                    <span class="text-[16px]">Started: <FormattedDate date={new Date(book.started)} /></span>
                                                                )}
                                                                    <span class="text-[16px] pt-[2px]">Finished: <FormattedDate date={new Date(book.finished)} /></span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            ))
                                        }
                                    </ul>
                                </div>
                            </li>
                        </ul>

                    ))
                }
            </div>
		</main>
		<Footer />
	</body>
</html>
